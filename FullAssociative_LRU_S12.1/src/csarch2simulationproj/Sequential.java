package csarch2simulationproj;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.JFileChooser;

public class Sequential extends javax.swing.JFrame {
    
    private String download_folder = "D:\\";
    Simpleton_LRU LRUCache;
    
    /**
     * Creates new form CSARCH2_S12_1
     */
    public Sequential() {
        initComponents();
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        BlockSize = new java.awt.TextField();
        label3 = new java.awt.Label();
        MemSize = new java.awt.TextField();
        label4 = new java.awt.Label();
        CacheSize = new java.awt.TextField();
        jSeparator1 = new javax.swing.JSeparator();
        label5 = new java.awt.Label();
        Simulate = new javax.swing.JButton();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        CacheHit = new java.awt.TextField();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        Average = new java.awt.TextField();
        label10 = new java.awt.Label();
        Total = new java.awt.TextField();
        label11 = new java.awt.Label();
        MissPenalty = new java.awt.TextField();
        label12 = new java.awt.Label();
        Final = new java.awt.TextField();
        CacheMiss = new java.awt.TextField();
        saveTxt = new javax.swing.JButton();
        CType = new javax.swing.JComboBox<>();
        MType = new javax.swing.JComboBox<>();
        label13 = new java.awt.Label();
        CacheTime = new java.awt.TextField();
        Reset = new javax.swing.JButton();
        label14 = new java.awt.Label();
        label15 = new java.awt.Label();
        Values = new java.awt.TextField();
        MemoryTime = new java.awt.TextField();
        Menu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        simulation = new javax.swing.JTextArea();
        Values1 = new java.awt.TextField();
        label16 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Full Associative/LRU (S12.1) - Sequential");
        setResizable(false);

        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        label1.setText("Full Associative/LRU");

        label2.setText("Block Size");

        BlockSize.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        label3.setText("Cache Memory Size");

        label4.setText("Main Memory Size");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        label5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label5.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        label5.setText("Output:");

        Simulate.setBackground(new java.awt.Color(0, 102, 0));
        Simulate.setForeground(new java.awt.Color(255, 255, 255));
        Simulate.setText("Simulate");
        Simulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimulateActionPerformed(evt);
            }
        });

        label6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label6.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        label6.setText("Input:");

        label7.setText("Cache Hit");

        CacheHit.setEditable(false);

        label8.setText("Cache Miss");

        label9.setText("Total Memory Access Time");

        Average.setEditable(false);

        label10.setText("Average Memory Access Time");

        Total.setEditable(false);

        label11.setText("Miss Penalty");

        MissPenalty.setEditable(false);

        label12.setText("Final Cache Memory");

        Final.setEditable(false);

        CacheMiss.setEditable(false);
        CacheMiss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CacheMissActionPerformed(evt);
            }
        });

        saveTxt.setText("Save to .txt");
        saveTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTxtActionPerformed(evt);
            }
        });

        CType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Block", "Word" }));
        CType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CTypeActionPerformed(evt);
            }
        });

        MType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Block", "Word" }));
        MType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MTypeActionPerformed(evt);
            }
        });

        label13.setText("Value range? (0-n)");

        Reset.setBackground(new java.awt.Color(204, 0, 0));
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        label14.setText("Cache Access Time");

        label15.setText("Memory Access Time");

        Menu.setBackground(new java.awt.Color(0, 51, 102));
        Menu.setForeground(new java.awt.Color(255, 255, 255));
        Menu.setText("Menu");
        Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuActionPerformed(evt);
            }
        });

        simulation.setColumns(20);
        simulation.setRows(5);
        jScrollPane2.setViewportView(simulation);

        label16.setText("No. of Iteration");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(9, 9, 9))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Menu)
                                        .addGap(24, 24, 24)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MemoryTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CacheTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(MemSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(CacheSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(BlockSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(Reset)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                        .addComponent(Simulate)
                                        .addGap(27, 27, 27))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(Values, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(Values1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(32, 32, 32)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(Total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(CacheHit, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CacheMiss, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Average, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MissPenalty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(Final, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(saveTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CacheHit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CacheMiss, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MissPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Average, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Final, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BlockSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CacheSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CacheTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(MemoryTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(MemSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Values, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Reset)
                                    .addComponent(Simulate)
                                    .addComponent(Menu))
                                .addGap(33, 33, 33))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Values1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimulateActionPerformed
        // TODO add your handling code here:
        simulateLRU();
    }//GEN-LAST:event_SimulateActionPerformed

    private void CTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CTypeActionPerformed

    private void MTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MTypeActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        BlockSize.setText(" ");
        BlockSize.setText("");
        CacheSize.setText(" ");
        CacheSize.setText("");
        CacheTime.setText(" ");
        CacheTime.setText("");
        MemSize.setText(" ");
        MemSize.setText("");
        MemoryTime.setText(" ");
        MemoryTime.setText("");
        Values.setText(" ");
        Values.setText("");
        
        CacheHit.setText(" ");
        CacheHit.setText("");
        CacheMiss.setText(" ");
        CacheMiss.setText("");
        MissPenalty.setText(" ");
        MissPenalty.setText("");
        Average.setText(" ");
        Average.setText("");
        Total.setText(" ");
        Final.setText("");
        simulation.setText(" ");
        simulation.setText("");
    }//GEN-LAST:event_ResetActionPerformed

    private void CacheMissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CacheMissActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CacheMissActionPerformed

    private void MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuActionPerformed
        // TODO add your handling code here:
        Menu m = new Menu();
        m.setLocationRelativeTo(null);
        m.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_MenuActionPerformed

    private void saveTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTxtActionPerformed
        // TODO add your handling code here:
        openFolder();
        String path = getDownloadFolder();
        path = path.replace("\\", "\\\\");
        String filename = "FullAssociativeLRU_Output.txt";
        String file = path + filename;
        
        try{
            File log = new File(file);
            
            if (log.createNewFile()) {
                System.out.println("File created: " + log.getName());
                
            } 
        }
        catch (IOException e){
            System.out.println("An error occurred." + e);
        }
        
        try{
            PrintWriter pw = new PrintWriter(new FileWriter(file));
            pw.println(simulation.getText());
            pw.flush();
            pw.close();
        }
        catch(IOException e){
            System.out.println("An error occurred." + e);
        }
    }//GEN-LAST:event_saveTxtActionPerformed
    
    
    /**
     * Get Download Folder
     * @return
    */
    public String getDownloadFolder(){
        return this.download_folder;
    }
    /**
     * Open JFileChooser to set download folder of client
     */
    public void openFolder(){
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int open = chooser.showDialog(this, "Select Folder");
        if(open == chooser.APPROVE_OPTION){
            download_folder = chooser.getSelectedFile().toString()+"\\";
        } else {
            download_folder = "D:\\";
        }
    }
    
    private boolean checkPositive(){
       int cache_block = Integer.parseInt(BlockSize.getText());
       int cache_size = Integer.parseInt(CacheSize.getText());
       int mem_size = Integer.parseInt(MemSize.getText());
       int cache_time = Integer.parseInt(CacheTime.getText());
       int mem_time = Integer.parseInt(MemoryTime.getText());
       
       if(cache_block < 0 && cache_size < 0 && mem_size < 0 && cache_time < 0 && mem_time < 0){
           return false;
       } else {
           return true;
       }
    }
    
    private void simulateLRU(){
        if(BlockSize.getText().length() > 0 && CacheSize.getText().length() > 0 && MemSize.getText().length() > 0 && CacheTime.getText().length() > 0 ){
            if(checkPositive() == true){
                 int block_size = Integer.parseInt(BlockSize.getText());
                 int cache_msize = Integer.parseInt(CacheSize.getText());
                 int main_msize = Integer.parseInt(MemSize.getText());
                 
                 //LRUCache = new Simpleton_LRU(cache_msize, this);
                 
                 String val = Values.getText();
                 String[] values = val.trim().split("\\s*,\\s*");
                 
                 String c_type = (String) CType.getSelectedItem();   
                 if(c_type.equals("Word")){
                     /*Convert cache word to block*/
                    int flag = 0;
                    int temp = 0;
                    int i = 1;
                    
                        while (flag == 0){
                            temp = (int) Math.pow(2, i);
                            System.out.println("Temp: " + temp);
                            if(temp >= cache_msize) {
                                flag = 1;
                            }
                            i++;
                        }
                        /*i = exponent of cache memory word*/
                        i--;
                        System.out.println("i: " + i);
                        int x = 1; 
                        flag = 0;
                        temp = 0;
                        while (flag == 0){
                            temp = (int) Math.pow(2, i);
                            if(temp >= cache_msize) {
                                flag = 1;
                            }
                            x++; /*x = exponent of block size*/
                        }
                    /*divide exponent of cache memory size  (word) / exponent of block size (word)*/
                    int expo = i-x;
                    System.out.println("Expo: " + expo);
                    /*block = 2^expo*/
                    cache_msize = (int) Math.pow(2,expo);
                    
                    System.out.println("Block: " + cache_msize);
                 }
                 
                 String m_type = (String) MType.getSelectedItem();   
                 if(m_type.equals("Word")){
                     
                 }
                 
                 simulation.append("CACHE SIMULATION: " + "\n");
                 simulation.append("Values: " + val + "\n");

                 for (String a : values) 
                     LRUCache.refer(a);
                 
                 simulation.append("OUTPUT: " + "\n\n");
                 //Hit rate
                 String hit = LRUCache.hit + "/" + values.length;
                 CacheHit.setText(hit);
                 float hit_rate = (float) LRUCache.hit/values.length;
                 simulation.append("Hit Rate: " + hit + "\n");

                 //Miss rate
                 String miss = LRUCache.miss + "/" + values.length;
                 CacheMiss.setText(miss);
                 float miss_rate = (float) LRUCache.miss/values.length;
                 simulation.append("Miss Rate: " + miss + "\n");

                 //Miss penalty (non-load thru)
                 int cache_access = Integer.parseInt(CacheTime.getText());
                 int memory_access = Integer.parseInt(MemoryTime.getText());
                 int misspenalty = cache_access + block_size*memory_access + cache_access;
                 String mp = Integer.toString(misspenalty);
                 MissPenalty.setText(mp);
                 simulation.append("Miss Penalty: " + mp + "\n");

                 //Average access time
                 float average_access = ( (hit_rate*cache_access) + (miss_rate*misspenalty) );
                 String avg = Float.toString(average_access);
                 Average.setText(avg);
                 simulation.append("Average Access Time: " + avg + "\n");

                 //Total access time
                 int total_access = ( (LRUCache.hit*block_size*cache_access) + ((cache_access+memory_access)*block_size*LRUCache.miss) + (LRUCache.miss*cache_access) );
                 String total = Integer.toString(total_access);
                 Total.setText(total);
                 simulation.append("Total Access Time: " + total + "\n");

                 //Cache Memory
                 Iterator<String> itr = LRUCache.result.iterator(); 
                 StringBuffer sb = new StringBuffer();
                 String temp;
                 while (itr.hasNext()){
                     temp = itr.next() + " ";
                     sb.append(temp);
                 }
                 String result = sb.toString();
                 Final.setText(result);
                 simulation.append("Final Cache: " + result);
             } else{
                 JOptionPane.showMessageDialog(this, "Invalid values! Please input positive inputs only...", "Error", JOptionPane.ERROR_MESSAGE); 
             }
        } else{
           JOptionPane.showMessageDialog(this, "Incomplete Form! Please complete to proceed...", "Error", JOptionPane.ERROR_MESSAGE);
       }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sequential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sequential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sequential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sequential.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sequential().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextField Average;
    private java.awt.TextField BlockSize;
    private javax.swing.JComboBox<String> CType;
    private java.awt.TextField CacheHit;
    private java.awt.TextField CacheMiss;
    private java.awt.TextField CacheSize;
    private java.awt.TextField CacheTime;
    private java.awt.TextField Final;
    private javax.swing.JComboBox<String> MType;
    private java.awt.TextField MemSize;
    private java.awt.TextField MemoryTime;
    private javax.swing.JButton Menu;
    private java.awt.TextField MissPenalty;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Simulate;
    private java.awt.TextField Total;
    private java.awt.TextField Values;
    private java.awt.TextField Values1;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label15;
    private java.awt.Label label16;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JButton saveTxt;
    public javax.swing.JTextArea simulation;
    // End of variables declaration//GEN-END:variables
}
